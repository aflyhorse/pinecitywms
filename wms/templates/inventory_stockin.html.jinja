{% extends "base.html.jinja" %}
{% from 'bootstrap5/form.html' import render_field %}
{% from 'bootstrap5/utils.html' import render_icon %}

{% block content %}
<div class="container p-5 my-5 border">
    <h2>入库</h2>
    <form method="post">
        {{ form.csrf_token }}
        {{ render_field(form.refcode) }}
        {{ render_field(form.warehouse) }}
        <datalist id="item-ids">
            {% for id, name in items %}
            <option value="{{ name }}">{{ name }}</option>
            {% endfor %}
        </datalist>
        <div id="items">
            {% for item_form in form.items %}
            {{ item_form.csrf_token }}
            {{ item_form.item_sku_id }}
            <div class="item-form d-flex align-items-center">
                <div class="flex-grow-1">
                    {{ render_field(item_form.item_id, placeholder="输入或双击选择物品") }}
                </div>
                <div class="flex-grow-1">
                    {{ render_field(item_form.quantity) }}
                </div>
                <div class="flex-grow-1">
                    {{ render_field(item_form.price) }}
                </div>
                <div class="ms-2">
                    <button type="button" class="btn btn-danger remove-item">{{ render_icon('trash') }}</button>
                </div>
            </div>
            {% endfor %}
        </div>
        <button type="button" class="btn btn-primary" id="add-item">添加物品</button>
        {{ render_field(form.submit) }}
    </form>
</div>
{% endblock content %}

{% block scripts %}
{{ super() }}
<script>
    document.addEventListener('DOMContentLoaded', function () {
        const addItemButton = document.getElementById('add-item');
        const itemsDiv = document.getElementById('items');

        // Handle adding new item
        addItemButton.addEventListener('click', function () {
            const itemForms = document.querySelectorAll('.item-form');
            const lastIndex = itemForms.length - 1;
            const newIndex = lastIndex + 1;

            if (lastIndex >= 0) {
                const hiddenField = document.querySelector(`[name="items-${lastIndex}-item_sku_id"]`);
                const template = itemForms[0].cloneNode(true);
                const newHiddenField = hiddenField.cloneNode();
                
                // Clone the CSRF token field and update its name
                const csrfToken = document.querySelector(`[name="items-${lastIndex}-csrf_token"]`);
                const newCsrfToken = csrfToken.cloneNode(true);
                newCsrfToken.name = `items-${newIndex}-csrf_token`;
                
                // Update hidden field name
                newHiddenField.name = `items-${newIndex}-item_sku_id`;
                newHiddenField.value = '';
                
                // Insert hidden fields before the template
                itemsDiv.appendChild(newHiddenField);
                itemsDiv.appendChild(newCsrfToken);
                
                // Clear input values
                template.querySelectorAll('input').forEach(input => {
                    if (!input.name.endsWith('csrf_token')) {  // Don't clear CSRF token
                        input.value = '';
                    }
                    
                    // Update the input name and id to use the new index
                    if (input.name) {
                        input.name = input.name.replace(/items-\d+/, `items-${newIndex}`);
                    }
                    if (input.id) {
                        input.id = input.id.replace(/items-\d+/, `items-${newIndex}`);
                    }
                });
                
                // Update label for attributes if present
                template.querySelectorAll('label').forEach(label => {
                    if (label.htmlFor) {
                        label.htmlFor = label.htmlFor.replace(/items-\d+/, `items-${newIndex}`);
                    }
                });
                
                itemsDiv.appendChild(template);
            }
        });

        // Handle removing item - FIX IMPLEMENTED HERE
        itemsDiv.addEventListener('click', function (event) {
            // Find the closest button with remove-item class
            const removeButton = event.target.closest('.remove-item');
            if (removeButton) {
                const itemForms = document.querySelectorAll('.item-form');
                if (itemForms.length > 1) {
                    const itemForm = removeButton.closest('.item-form');
                    const itemFormIndex = Array.from(itemForms).indexOf(itemForm);
                    
                    // Remove the form element and its related fields
                    itemForm.remove();
                    
                    // Remove hidden fields
                    const hiddenFieldsToRemove = document.querySelectorAll(`[name^="items-${itemFormIndex}-"]`);
                    hiddenFieldsToRemove.forEach(field => field.remove());
                    
                    // Renumber remaining forms
                    document.querySelectorAll('.item-form').forEach((form, idx) => {
                        form.querySelectorAll('[name*="items-"]').forEach(input => {
                            input.name = input.name.replace(/items-\d+/, `items-${idx}`);
                            if (input.id) {
                                input.id = input.id.replace(/items-\d+/, `items-${idx}`);
                            }
                        });
                        
                        form.querySelectorAll('label[for*="items-"]').forEach(label => {
                            label.htmlFor = label.htmlFor.replace(/items-\d+/, `items-${idx}`);
                        });
                    });
                    
                    // Renumber all remaining hidden fields
                    const allHiddenFields = document.querySelectorAll('[name*="items-"]');
                    allHiddenFields.forEach(field => {
                        const currentIndex = field.name.match(/items-(\d+)/)[1];
                        if (currentIndex > itemFormIndex) {
                            const newIndex = parseInt(currentIndex) - 1;
                            field.name = field.name.replace(/items-\d+/, `items-${newIndex}`);
                        }
                    });
                }
            }
        });

        // Create a mapping of item names to IDs
        const itemNameMapping = {};
        {% for id, name in items %}
        itemNameMapping['{{ name }}'] = {{ id }};
        {% endfor %}

        // Store the original items array for searching
        const items = [
            {% for id, name in items %}
            { id: {{ id }}, name: '{{ name }}' },
            {% endfor %}
        ];

        // Handle item search and selection
        itemsDiv.addEventListener('input', function(event) {
            const input = event.target;
            if (input.name && input.name.endsWith('item_id')) {
                // If exact match found, keep it
                const itemId = itemNameMapping[input.value];
                if (itemId) {
                    // Set the hidden field value to the actual item ID
                    const itemIndex = input.name.match(/items-(\d+)/)[1];
                    const hiddenField = document.querySelector(`[name="items-${itemIndex}-item_sku_id"]`);
                    if (hiddenField) {
                        hiddenField.value = itemId;
                    }
                    return;
                }
                
                // Update datalist options based on input
                const datalist = document.getElementById('item-ids');
                datalist.innerHTML = '';
                
                const searchTerm = input.value.toLowerCase();
                const matches = items.filter(item => 
                    item.name.toLowerCase().includes(searchTerm)
                );
                
                matches.forEach(item => {
                    const option = document.createElement('option');
                    option.value = item.name;
                    datalist.appendChild(option);
                });
            }
        });

        // Handle form submission with the hidden IDs
        const form = document.querySelector('form');
        form.addEventListener('submit', function (event) {
            const itemInputs = document.querySelectorAll('[name$="item_id"]');
            let hasError = false;

            for (let input of itemInputs) {
                const name = input.value;
                const itemId = itemNameMapping[name];
                
                if (itemId) {
                    // Get the index from the input name
                    const itemIndex = input.name.match(/items-(\d+)/)[1];
                    // Set the hidden field
                    const hiddenField = document.querySelector(`[name="items-${itemIndex}-item_sku_id"]`);
                    
                    if (hiddenField) {
                        hiddenField.value = itemId;
                    }
                } else if (input.value) {
                    hasError = true;
                }
            }
            
            if (hasError) {
                event.preventDefault();
                alert('请从列表中选择有效的物品');
            }
        });
        
        // Set initial values for hidden fields based on visible fields
        document.querySelectorAll('[name$="item_id"]').forEach(input => {
            const name = input.value;
            const itemId = itemNameMapping[name];
            
            if (itemId) {
                const itemIndex = input.name.match(/items-(\d+)/)[1];
                const hiddenField = document.querySelector(`[name="items-${itemIndex}-item_sku_id"]`);
                if (hiddenField) {
                    hiddenField.value = itemId;
                }
            }
        });
    });
</script>
{% endblock scripts %}