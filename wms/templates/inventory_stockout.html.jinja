{% extends "base.html.jinja" %}
{% from 'bootstrap5/form.html' import render_field %}
{% block content %}
    <style>
        /* Style for readonly fields */
        input[readonly] {
            background-color: #e9ecef;
            cursor: not-allowed;
            border-color: #ced4da;
            opacity: 0.8;
        }
    </style>
    <div class="container p-5 my-5 border">
        <h2>出库</h2>
        <form method="post" autocomplete="off" id="stockout-form">
            {{ form.csrf_token }}
            <div class="row mb-3">
                <div class="col-md-6">{{ render_field(form.warehouse) }}</div>
            </div>
            <div class="row mb-3">
                <div class="col-md-6">{{ render_field(form.area) }}</div>
                <div class="col-md-6">{{ render_field(form.department) }}</div>
            </div>
            <div class="row mb-3">
                <div class="col-md-12">{{ render_field(form.location) }}</div>
            </div>
            <datalist id="item-ids">
                {% for id, name, price, count in items %}<option value="{{ name }}">{{ name }}</option>{% endfor %}
            </datalist>
            <div id="items">
                {% for item_form in form.items %}
                    {{ item_form.csrf_token }}
                    {{ item_form.item_sku_id }}
                    <div class="item-form d-flex align-items-center">
                        <div class="flex-grow-1">{{ render_field(item_form.item_id, placeholder="输入或双击选择物品", autocomplete="off") }}</div>
                        <div class="flex-grow-1">{{ render_field(item_form.stock_count, class="readonly-field") }}</div>
                        <div class="flex-grow-1">{{ render_field(item_form.quantity) }}</div>
                        <div class="flex-grow-1">{{ render_field(item_form.price, class="readonly-field") }}</div>
                        <button type="button" class="btn btn-danger remove-item">x</button>
                    </div>
                {% endfor %}
            </div>
            <button type="button" class="btn btn-primary" id="add-item">添加物品</button>
            {{ render_field(form.submit) }}
        </form>
    </div>
{% endblock content %}
{% block scripts %}
    {{ super() }}
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const addItemButton = document.getElementById('add-item');
            const itemsDiv = document.getElementById('items');
            const warehouseSelect = document.querySelector('[name="warehouse"]');
            const stockoutForm = document.getElementById('stockout-form');

            // Handle warehouse change - create a dedicated action for warehouse changes
            warehouseSelect.addEventListener('change', function() {
                // Redirect to the stockout page with the selected warehouse as a parameter
                const selectedWarehouse = this.value;
                window.location.href = `{{ url_for('stockout') }}?warehouse=${selectedWarehouse}`;
            });

            // Handle adding new item
            addItemButton.addEventListener('click', function() {
                const itemForms = document.querySelectorAll('.item-form');
                const lastIndex = itemForms.length - 1;
                const newIndex = lastIndex + 1;

                if (lastIndex >= 0) {
                    const hiddenField = document.querySelector(`[name="items-${lastIndex}-item_sku_id"]`);
                    const template = itemForms[0].cloneNode(true);
                    const newHiddenField = hiddenField.cloneNode();
                    
                    // Update hidden field name and clear value
                    newHiddenField.name = `items-${newIndex}-item_sku_id`;
                    newHiddenField.value = '';
                    
                    // Insert hidden field before the template
                    itemsDiv.appendChild(newHiddenField);
                    
                    // Clear input values
                    template.querySelectorAll('input').forEach(input => {
                        input.value = '';
                        
                        // Update input name and id to use new index
                        if (input.name) {
                            input.name = input.name.replace(/items-\d+/, `items-${newIndex}`);
                        }
                        if (input.id) {
                            input.id = input.id.replace(/items-\d+/, `items-${newIndex}`);
                        }
                        
                        // Ensure autocomplete is off for newly added item inputs
                        if (input.name && input.name.endsWith('item_id')) {
                            input.setAttribute('autocomplete', 'off');
                            input.setAttribute('data-original-value', '');
                        }
                        
                        // Ensure readonly styling is applied
                        if (input.hasAttribute('readonly')) {
                            input.classList.add('readonly-field');
                        }
                    });

                    // Update label for attributes if present
                    template.querySelectorAll('label').forEach(label => {
                        if (label.htmlFor) {
                            label.htmlFor = label.htmlFor.replace(/items-\d+/, `items-${newIndex}`);
                        }
                    });
                    
                    itemsDiv.appendChild(template);
                }
            });

            // Handle removing item
            itemsDiv.addEventListener('click', function(event) {
                if (event.target.classList.contains('remove-item')) {
                    const itemForms = document.querySelectorAll('.item-form');
                    if (itemForms.length > 1) {
                        const itemForm = event.target.closest('.item-form');
                        const itemFormIndex = Array.from(itemForms).indexOf(itemForm);
                        // Remove the associated hidden field too
                        const hiddenField = document.querySelector(`[name="items-${itemFormIndex}-item_sku_id"]`);
                        if (hiddenField) {
                            hiddenField.remove();
                        }
                        itemForm.remove();
                        
                        // Renumber remaining forms
                        document.querySelectorAll('.item-form').forEach((form, idx) => {
                            form.querySelectorAll('[name*="items-"]').forEach(input => {
                                input.name = input.name.replace(/items-\d+/, `items-${idx}`);
                                if (input.id) {
                                    input.id = input.id.replace(/items-\d+/, `items-${idx}`);
                                }
                            });
                            
                            form.querySelectorAll('label[for*="items-"]').forEach(label => {
                                label.htmlFor = label.htmlFor.replace(/items-\d+/, `items-${idx}`);
                            });
                        });
                        
                        // Also renumber hidden fields
                        document.querySelectorAll('[name*="item_sku_id"]').forEach((hidden, idx) => {
                            hidden.name = hidden.name.replace(/items-\d+/, `items-${idx}`);
                        });
                    }
                }
            });

            // Create a mapping of item names to IDs, prices and stock counts
            const itemNameMapping = {};
            const itemPrices = {};
            const itemCounts = {};
            {% for id, name, price, count in items %}
                itemNameMapping['{{ name }}'] = {{ id }};
                itemPrices[{{ id }}] = {{ price }};
                itemCounts[{{ id }}] = {{ count }};
            {% endfor %}

            // Store the original items array for searching
            const items = [
                {% for id, name, price, count in items %}
                    {
                        id: {{ id }},
                        name: '{{ name }}',
                        price: {{ price }},
                        count: {{ count }}
                    }{% if not loop.last %},{% endif %}
                {% endfor %}
            ];

            // Handle item search, selection, and auto-fill for price and stock count
            itemsDiv.addEventListener('input', function(event) {
                const input = event.target;
                if (input.name && input.name.endsWith('item_id')) {
                    // Get the item form container
                    const itemForm = input.closest('.item-form');
                    const priceInput = itemForm.querySelector('[name$="price"]');
                    const stockCountInput = itemForm.querySelector('[name$="stock_count"]');

                    // Store the original text input value for form submission
                    input.setAttribute('data-original-value', input.value);

                    // If exact match found, set the price and stock count
                    const itemId = itemNameMapping[input.value];
                    if (itemId) {
                        priceInput.value = itemPrices[itemId].toFixed(2);
                        stockCountInput.value = itemCounts[itemId];
                        
                        // Set the hidden field value to the actual item ID
                        const itemIndex = input.name.match(/items-(\d+)/)[1];
                        const hiddenField = document.querySelector(`[name="items-${itemIndex}-item_sku_id"]`);
                        if (hiddenField) {
                            hiddenField.value = itemId;
                        }
                        
                        // Highlight the readonly fields briefly to show they've been updated
                        [priceInput, stockCountInput].forEach(field => {
                            field.style.transition = 'background-color 0.3s';
                            field.style.backgroundColor = '#d1ecf1';
                            setTimeout(() => {
                                field.style.backgroundColor = '';
                            }, 500);
                        });
                        
                        return;
                    }

                    // Update datalist options based on input
                    const datalist = document.getElementById('item-ids');
                    datalist.innerHTML = '';

                    const searchTerm = input.value.toLowerCase();
                    const matches = items.filter(item =>
                        item.name.toLowerCase().includes(searchTerm)
                    );

                    matches.forEach(item => {
                        const option = document.createElement('option');
                        option.value = item.name;
                        datalist.appendChild(option);
                    });
                }
            });

            // Store selected item's ID in the form before submission
            stockoutForm.addEventListener('submit', function(event) {
                const itemInputs = document.querySelectorAll('[name$="item_id"]');
                let hasError = false;

                for (let input of itemInputs) {
                    // Use the data-original-value to look up the ID
                    const originalValue = input.getAttribute('data-original-value') || input.value;
                    const itemId = itemNameMapping[originalValue];
                    
                    if (itemId) {
                        // Get the index from the input name
                        const itemIndex = input.name.match(/items-(\d+)/)[1];
                        // Set the hidden field
                        const hiddenField = document.querySelector(`[name="items-${itemIndex}-item_sku_id"]`);
                        
                        if (hiddenField) {
                            hiddenField.value = itemId;
                        }
                    } else if (input.value) {
                        hasError = true;
                    }
                }

                if (hasError) {
                    event.preventDefault();
                    alert('请从列表中选择有效的物品');
                }
            });
            
            // Set initial data-original-value for existing fields
            document.querySelectorAll('[name$="item_id"]').forEach(input => {
                input.setAttribute('data-original-value', input.value);
                input.setAttribute('autocomplete', 'off');
                
                // Also set the hidden field value
                const name = input.value;
                const itemId = itemNameMapping[name];
                
                if (itemId) {
                    const itemIndex = input.name.match(/items-(\d+)/)[1];
                    const hiddenField = document.querySelector(`[name="items-${itemIndex}-item_sku_id"]`);
                    if (hiddenField) {
                        hiddenField.value = itemId;
                    }
                }
            });

            // Apply visual readonly styling to readonly fields
            document.querySelectorAll('input[readonly]').forEach(input => {
                input.classList.add('readonly-field');
            });
        });
    </script>
{% endblock scripts %}
